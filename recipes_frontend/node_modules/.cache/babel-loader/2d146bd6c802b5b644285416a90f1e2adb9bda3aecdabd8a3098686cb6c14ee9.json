{"ast":null,"code":"var _jsxFileName = \"F:\\\\programs\\\\react-native\\\\recipes\\\\recipes_frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport Search from './pages/Search.js';\nimport { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [options, setoptions] = useState([]);\n  const [serverStatus, setServerStatus] = useState(\"Wait\");\n  useEffect(() => {\n    const fetchData = () => {\n      let url = 'http://192.168.29.231:1234/options';\n      fetch(url, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      }).then(response => {\n        // Check if response is okay\n        if (!response.ok) {\n          setServerStatus(\"error\");\n          throw new Error('Network response was not ok');\n        }\n        // Parse response body as JSON and return the parsed data\n        else {\n          setServerStatus(\"OK\");\n          return response.json();\n        }\n      }).then(data => {\n        setoptions(data);\n      }).catch(error => {\n        setServerStatus(\"error\");\n        console.error(error);\n      });\n    };\n    fetchData();\n  }, []);\n  const callPages = () => {\n    if (serverStatus === \"Wait\") {\n      return /*#__PURE__*/_jsxDEV(\"view\", {\n        style: {\n          color: \"green\"\n        },\n        children: \"Wait\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 14\n      }, this);\n    } else {\n      if (serverStatus === \"error\") {\n        return /*#__PURE__*/_jsxDEV(\"view\", {\n          style: {\n            color: \"Red\"\n          },\n          children: \"Error\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 16\n        }, this);\n      } else {\n        return /*#__PURE__*/_jsxDEV(Search, {\n          Option: options,\n          setServerStatus: setServerStatus\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 16\n        }, this);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: callPages()\n  }, void 0, false);\n}\n_s(App, \"IpmZrLBc0bYabDuWzMEBJFiquXI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Search","useEffect","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","options","setoptions","serverStatus","setServerStatus","fetchData","url","fetch","method","headers","then","response","ok","Error","json","data","catch","error","console","callPages","style","color","children","fileName","_jsxFileName","lineNumber","columnNumber","Option","_c","$RefreshReg$"],"sources":["F:/programs/react-native/recipes/recipes_frontend/src/App.js"],"sourcesContent":["\nimport Search from './pages/Search.js';\nimport { useEffect, useState } from 'react';\n\nfunction App() {\n\n  const [options, setoptions] = useState([]);\n  const [serverStatus, setServerStatus] = useState(\"Wait\");\n\n  useEffect(() => {\n    const fetchData=()=>{\n      let url='http://192.168.29.231:1234/options';\n  \n      fetch(url,{\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n        }\n      })\n      .then(response=>{\n        // Check if response is okay\n      if (!response.ok) {\n        setServerStatus(\"error\");\n        throw new Error('Network response was not ok');\n      }\n      // Parse response body as JSON and return the parsed data\n      else{\n        setServerStatus(\"OK\");\n        return response.json();\n      }\n    })\n      .then(data=>{\n        setoptions(data);\n      })\n      .catch(error=>{\n        setServerStatus(\"error\");\n        console.error(error);\n      })\n    }\n\n    \n      fetchData();\n    \n  }, [])\n  \n  const callPages=()=>{\n    if(serverStatus===\"Wait\"){\n      return <view style={{color:\"green\"}}>Wait</view>;\n    }\n    else{\n      if(serverStatus===\"error\"){\n        return <view style={{color:\"Red\"}}>Error</view>;\n      }\n      else{\n        return <Search Option={options} setServerStatus={setServerStatus}/>;\n      }\n    }\n  }\n\n  return (\n    <>\n      {callPages()}\n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AACA,OAAOA,MAAM,MAAM,mBAAmB;AACtC,SAASC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAE5C,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EAEb,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAC1C,MAAM,CAACS,YAAY,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,MAAM,CAAC;EAExDD,SAAS,CAAC,MAAM;IACd,MAAMY,SAAS,GAACA,CAAA,KAAI;MAClB,IAAIC,GAAG,GAAC,oCAAoC;MAE5CC,KAAK,CAACD,GAAG,EAAC;QACRE,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC,CACDC,IAAI,CAACC,QAAQ,IAAE;QACd;QACF,IAAI,CAACA,QAAQ,CAACC,EAAE,EAAE;UAChBR,eAAe,CAAC,OAAO,CAAC;UACxB,MAAM,IAAIS,KAAK,CAAC,6BAA6B,CAAC;QAChD;QACA;QAAA,KACI;UACFT,eAAe,CAAC,IAAI,CAAC;UACrB,OAAOO,QAAQ,CAACG,IAAI,CAAC,CAAC;QACxB;MACF,CAAC,CAAC,CACCJ,IAAI,CAACK,IAAI,IAAE;QACVb,UAAU,CAACa,IAAI,CAAC;MAClB,CAAC,CAAC,CACDC,KAAK,CAACC,KAAK,IAAE;QACZb,eAAe,CAAC,OAAO,CAAC;QACxBc,OAAO,CAACD,KAAK,CAACA,KAAK,CAAC;MACtB,CAAC,CAAC;IACJ,CAAC;IAGCZ,SAAS,CAAC,CAAC;EAEf,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMc,SAAS,GAACA,CAAA,KAAI;IAClB,IAAGhB,YAAY,KAAG,MAAM,EAAC;MACvB,oBAAOP,OAAA;QAAMwB,KAAK,EAAE;UAACC,KAAK,EAAC;QAAO,CAAE;QAAAC,QAAA,EAAC;MAAI;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAM,CAAC;IAClD,CAAC,MACG;MACF,IAAGvB,YAAY,KAAG,OAAO,EAAC;QACxB,oBAAOP,OAAA;UAAMwB,KAAK,EAAE;YAACC,KAAK,EAAC;UAAK,CAAE;UAAAC,QAAA,EAAC;QAAK;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAM,CAAC;MACjD,CAAC,MACG;QACF,oBAAO9B,OAAA,CAACJ,MAAM;UAACmC,MAAM,EAAE1B,OAAQ;UAACG,eAAe,EAAEA;QAAgB;UAAAmB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC;MACrE;IACF;EACF,CAAC;EAED,oBACE9B,OAAA,CAAAE,SAAA;IAAAwB,QAAA,EACGH,SAAS,CAAC;EAAC,gBACZ,CAAC;AAEP;AAACnB,EAAA,CA5DQD,GAAG;AAAA6B,EAAA,GAAH7B,GAAG;AA8DZ,eAAeA,GAAG;AAAC,IAAA6B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}